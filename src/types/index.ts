// Core Entity Types for DIGS Application

export interface BaseEntity {
  id: string;
  createdOn: Date;
  createdBy: string;
  modifiedOn?: Date;
  modifiedBy?: string;
}

// Enumerations
export enum CaseStatus {
  New = 'New',
  Investigation = 'Investigation',
  Investigating = 'Investigating', // Active investigation
  EvidenceReview = 'Evidence_Review',
  RecommendationPending = 'Recommendation_Pending',
  PRMScheduled = 'PRM_Scheduled',
  PRMComplete = 'PRM_Complete',
  DecisionPending = 'Decision_Pending',
  PendingERU = 'Pending_ERU', // Awaiting Evidence Relied Upon
  Closed = 'Closed',
  Archived = 'Archived'
}

export enum ViolationType {
  Performance = 'Performance',
  Attendance = 'Attendance',
  EEO = 'EEO',
  Discrimination = 'Discrimination',
  DrugAlcohol = 'Drug_Alcohol',
  Misconduct = 'Misconduct',
  Safety = 'Safety',
  PolicyViolation = 'Policy_Violation'
}

export enum TaskStatus {
  Open = 'Open',
  InProgress = 'In_Progress',
  Pending = 'Pending',
  Completed = 'Completed',
  Cancelled = 'Cancelled',
  Overdue = 'Overdue'
}

export enum NoteCategory {
  General = 'General',
  PRMUpdate = 'PRM_Update',
  ContactAFA = 'Contact_AFA',
  Interview = 'Interview',
  Legal = 'Legal',
  PRMMinutes = 'PRM_Minutes'
}

export enum DocumentType {
  Statement = 'Statement',
  Email = 'Email',
  Photo = 'Photo',
  Video = 'Video',
  Audio = 'Audio',
  Report = 'Report',
  Medical = 'Medical',
  PolicyDocument = 'Policy_Document',
  Other = 'Other'
}

export enum UserRole {
  Investigator = 'Investigator',
  PerformanceManager = 'Performance_Manager',
  LaborRelationsAnalyst = 'Labor_Relations_Analyst',
  LegalCounsel = 'Legal_Counsel',
  SeniorLeadership = 'Senior_Leadership',
  LocalLeadership = 'Local_Leadership',
  SystemAdmin = 'System_Admin'
}

export enum UnionGroup {
  AFA = 'AFA',
  ALPA = 'ALPA',
  IAM = 'IAM'
}

export enum BaseCode {
  ANC = 'ANC',
  SEA = 'SEA',
  PDX = 'PDX',
  SFO = 'SFO',
  LAX = 'LAX',
  SAN = 'SAN',
  HNL = 'HNL'
}

export enum SLAEventType {
  DisciplinaryNotice = 'Disciplinary_Notice',
  HearingRequest = 'Hearing_Request',
  HearingScheduling = 'Hearing_Scheduling',
  HearingDecision = 'Hearing_Decision',
  BoardAppeal = 'Board_Appeal',
  ContractGrievance = 'Contract_Grievance'
}

export enum GrievanceType {
  PostDisciplinary = 'PostDisciplinary',
  Contract = 'Contract'
}

export enum GrievanceStatus {
  Filed = 'Filed',
  UnderReview = 'UnderReview',
  Hearing = 'Hearing',
  Decision = 'Decision',
  Appeal = 'Appeal',
  Closed = 'Closed'
}

// Core Entities
export interface Case extends BaseEntity {
  primaryCaseId: string; // INV-YYYY-NNNN
  secondaryCaseId: string; // Last,First-EID
  caseNumber: string; // Display-friendly case number
  employeeKey: string;
  employeeFirstName: string;
  employeeLastName: string;
  employeeId: string;
  unionGroup: UnionGroup;
  violationType: ViolationType;
  severity: number; // 1-5
  likelihood: number; // 1-5
  status: CaseStatus;
  priority: 'Low' | 'Medium' | 'High' | 'Critical';
  dok: Date; // Date of Knowledge - immutable
  incidentDate: Date;
  reportedDate: Date;
  investigatorId: string;
  assignedTo?: string; // Current assignee
  baseLocation: BaseCode;
  riskScore: number; // calculated
  litigationHold: boolean;
  description?: string;
  summary?: string;
  // Workflow fields
  investigationDeadline: Date;
  closureDeadline: Date;
  closeoutScheduled: boolean;
  eruCompleted: boolean; // Evidence Relied Upon completed
}

export interface Task extends BaseEntity {
  caseId: string;
  title: string;
  description: string;
  ownerId: string;
  assignedTo: string; // User assigned to this task
  assignedBy: string;
  dueDate: Date;
  completedDate?: Date;
  status: TaskStatus;
  priority: 'Low' | 'Medium' | 'High' | 'Critical';
  taskType: string;
  type: 'task' | 'meeting' | 'document' | 'review'; // Task category
  autoGenerated: boolean;
}

export interface Note extends BaseEntity {
  caseId: string;
  authorId: string;
  noteCategory: NoteCategory;
  subject: string;
  body: string; // rich text
  followUpFlag: boolean;
  followUpDate?: Date;
  isConfidential: boolean;
}

export interface Evidence extends BaseEntity {
  caseId: string;
  fileName: string;
  fileSize: number;
  mimeType: string;
  docType: DocumentType;
  hash: string; // SHA-256
  privilegedFlag: boolean;
  virusScanStatus: 'Pending' | 'Clean' | 'Infected' | 'Failed';
  virusScanDate?: Date;
  storageLocation: string;
  uploadedBy: string;
  chainOfCustodyLog: ChainOfCustodyEntry[];
}

export interface ChainOfCustodyEntry {
  timestamp: Date;
  userId: string;
  action: 'Upload' | 'View' | 'Download' | 'Share' | 'Modify';
  details: string;
  ipAddress?: string;
}

export interface SLAEvent extends BaseEntity {
  parentId: string; // Case or Grievance ID
  parentType: 'Case' | 'Grievance';
  eventType: SLAEventType;
  triggerDate: Date;
  dueDate: Date;
  completedDate?: Date;
  status: 'Pending' | 'InProgress' | 'Completed' | 'Overdue' | 'Paused';
  businessDaysAllocated: number;
  businessDaysUsed: number;
  excludedDays: number;
}

export interface SLAExclusion extends BaseEntity {
  parentCaseId: string;
  exclusionType: 'LOA' | 'Sick' | 'Holiday' | 'Other';
  startDate: Date;
  endDate: Date;
  reason: string;
  approvedBy: string;
  documentationRequired: boolean;
}

export interface Grievance extends BaseEntity {
  grievanceNumber: string; // auto-generated
  type: GrievanceType;
  linkedCaseId?: string;
  employeeKey: string;
  unionRepresentative: string;
  filingDate: Date;
  responseDueDate: Date;
  status: GrievanceStatus;
  step: number; // 1-4
  currentStepDueDate: Date;
  finalDecision?: string;
  decisionDate?: Date;
  description: string;
  contractArticle?: string;
}

export interface Employee extends BaseEntity {
  employeeKey: string;
  employeeId: string;
  firstName: string;
  lastName: string;
  email: string;
  unionGroup: UnionGroup;
  baseLocation: BaseCode;
  hireDate: Date;
  terminationDate?: Date;
  status: 'Active' | 'LOA' | 'Terminated';
  loaStartDate?: Date;
  loaEndDate?: Date;
  loaReason?: string;
}

export interface User extends BaseEntity {
  employeeId: string;
  firstName: string;
  lastName: string;
  email: string;
  role: UserRole;
  unionGroup?: UnionGroup;
  baseLocation?: BaseCode;
  isActive: boolean;
  lastLogin?: Date;
}

export interface Base extends BaseEntity {
  baseCode: BaseCode;
  baseName: string;
  city: string;
  state: string;
  country: string;
  timeZone: string;
  isActive: boolean;
}

export interface PRMDocket extends BaseEntity {
  meetingDate: Date;
  meetingType: 'Regular' | 'Special';
  status: 'Scheduled' | 'InProgress' | 'Completed';
  agendaGenerated: boolean;
  minutesCompleted: boolean;
}

export interface PRMDocketItem extends BaseEntity {
  docketId: string;
  caseId: string;
  itemOrder: number;
  onLeaveHold: boolean;
  recommendation?: string;
  decision?: string;
  notes?: string;
}

export interface DocumentPacket extends BaseEntity {
  caseId: string;
  packetType: 'Full' | 'AFA_Redacted';
  generationDate: Date;
  status: 'Pending' | 'Generated' | 'Delivered' | 'Failed';
  fileLocation?: string;
  generatedBy: string;
  deliveredTo?: string;
  deliveryDate?: Date;
}

export interface Notification extends BaseEntity {
  recipientId: string;
  notificationType: 'SLA_Warning' | 'SLA_Overdue' | 'Recommendation_Ready' | 'Packet_Generated' | 'Litigation_Hold';
  channel: 'Email' | 'Teams' | 'Dashboard';
  subject: string;
  message: string;
  sentDate?: Date;
  status: 'Pending' | 'Sent' | 'Failed';
  relatedEntityId?: string;
  relatedEntityType?: string;
}

// Dashboard and Analytics Types
export interface DashboardMetrics {
  totalCases: number;
  activeCases: number;
  overdueCases: number;
  totalGrievances: number;
  activeGrievances: number;
  slaCompliance: number;
  averageResolutionDays: number;
  riskDistribution: {
    low: number;
    medium: number;
    high: number;
    critical: number;
  };
}

export interface CaseSearchFilters {
  status?: CaseStatus[];
  violationType?: ViolationType[];
  investigator?: string[];
  assignedTo?: string; // Filter by assigned user
  baseLocation?: BaseCode[];
  dateRange?: {
    start: Date;
    end: Date;
  };
  riskLevel?: string[];
  searchTerm?: string;
}

export interface GrievanceSearchFilters {
  status?: GrievanceStatus[];
  type?: GrievanceType[];
  step?: number[];
  unionRep?: string[];
  assignedTo?: string; // Filter by assigned user
  dateRange?: {
    start: Date;
    end: Date;
  };
  searchTerm?: string;
}

// Form and UI Types
export interface FormField {
  name: string;
  label: string;
  type: 'text' | 'textarea' | 'select' | 'date' | 'number' | 'checkbox' | 'file';
  required?: boolean;
  options?: { value: string; label: string }[];
  validation?: any;
}

export interface TableColumn<T> {
  key: keyof T;
  header: string;
  sortable?: boolean;
  filterable?: boolean;
  render?: (value: any, row: T) => React.ReactNode;
}

export interface PagedResult<T> {
  data: T[];
  total: number;
  page: number;
  pageSize: number;
  hasMore: boolean;
}

// API Response Types
export interface ApiResponse<T> {
  success: boolean;
  data?: T;
  error?: string;
  message?: string;
}

export interface ApiError {
  message: string;
  code?: string;
  details?: any;
}
